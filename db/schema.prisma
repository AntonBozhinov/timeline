// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           Role     @default(USER)

  tokens         Token[]
  sessions       Session[]
  timelines      Timeline[]
  TimelineAccess TimelineAccess[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map("sessions")
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
  @@map("tokens")
}

enum TokenType {
  RESET_PASSWORD
}

model Timeline {
  id             Int              @id @default(autoincrement())
  name           String
  owner          User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        Int
  LogEntry       TimelineEntry[]
  TimelineAccess TimelineAccess[]

  @@map("timelines")
}

model TimelineEntry {
  id         Int      @id @default(autoincrement())
  details    String
  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("timeline_entries")
}

model TimelineAccess {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  timeline   Timeline   @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  timelineId Int
  access     AccessType
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([timelineId, userId], name: "timeline_access_timeline_user_idx")
  @@map("timeline_access")
}

enum AccessType {
  READ
  WRITE
}
