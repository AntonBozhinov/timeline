// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           Role     @default(USER)

  tokens         Token[]
  sessions       Session[]
  children       Child[]
  childrenAccess ChildAccess[]
  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map("sessions")
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
  @@map("tokens")
}

enum TokenType {
  RESET_PASSWORD
}

model Child {
  id        Int      @id @default(autoincrement())
  name      String
  birthDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int?

  timeline Timeline?
  user     User?         @relation(fields: [userId], references: [id])
  weights  ChildWeight[]
  heigts   ChildHeight[]

  ChildAccess ChildAccess[]
  @@map("children")
}

model ChildWeight {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  weight    Float
  childId   Int?

  child Child? @relation(fields: [childId], references: [id])
  @@map("child_weights")
}

model ChildHeight {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  height    Float
  childId   Int?
  child     Child?   @relation(fields: [childId], references: [id])

  @@map("child_heights")
}

model ChildAccess {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  child          Child          @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId        Int
  parentalStatus ParentalStatus
  access         AccessType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([childId, userId], name: "child_access_child_user_idx")
  @@map("child_access")
}

enum AccessType {
  READ
  WRITE
}

enum ParentalStatus {
  FATHER
  MOTHER
  OTHER
}

model Timeline {
  id      Int             @id @default(autoincrement())
  name    String
  child   Child           @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId Int             @unique
  entry   TimelineEntry[]

  @@map("timelines")
}

model TimelineEntry {
  id         Int      @id @default(autoincrement())
  details    String
  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("timeline_entries")
}
